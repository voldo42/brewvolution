@model Beervolution.ViewModels.CreateBrewViewModel

<script type="text/javascript">
    $.noConflict();
    jQuery(document).ready(function ($) {
        $('.datepicker').datetimepicker({
            format: 'DD/MM/YYYY'
        });
    });
</script>

<script type="text/javascript">

    jQuery(document).ready(function ($) {

        // Hide NewWaterTypeGroup and NewFermentableTypeGroup
        $('#newWaterTypeGroup').hide();
        $('#newFermentableTypeGroup').hide();

        // Show NewWaterTypeGroup when New Water Type is selected
        $('#WaterType').change(function () {

            if ($('#WaterType').val() == 'Create New') {
                $('#newWaterTypeGroup').show();
            }
            else {
                $('#newWaterTypeGroup').hide();
                $('#newWaterTypeGroup').val('');
            }
        });

        // Show NewFermentableGroup when New Fermentable is selected
        $('#FermentableType').change(function () {

            if ($('#FermentableType').val() == 'Create New') {
                $('#newFermentableTypeGroup').show();
            }
            else {
                $('#newFermentableTypeGroup').hide();
                $('#newFermentableTypeGroup').val('');
            }
        });

        // Populate WaterType drop down
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetBeers", "Beers")',
            dataType: 'json',
            data: { selectedItem: '@Model.BeerID' },
            success: function (beers) {
                // beers contains the JSON formatted list
                $.each(beers, function (i, beer) {
                    $("#BeerID").append('<option value="' + beer.Value + '">' +
                        beer.Text + '</option>');
                });

                $('#BeerID').val($('#Brew_Beer_ID').val());
            },
            error: function (ex) {
                console.log('Failed to retrieve beers.' + ex);
            }
        });

        // Populate WaterType drop down
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetWaterTypes", "Brews")',
            dataType: 'json',
            data: { selectedItem: '@Model.OriginalWaterType' },
            success: function (waterTypes) {
                // waterTypes contains the JSON formatted list
                $.each(waterTypes, function (i, waterType) {
                    $("#WaterType").append('<option value="' + waterType.Value + '">' +
                        waterType.Text + '</option>');
                });

                $('#WaterType').val($('#Brew_Variables_WaterType').val());
            },
            error: function (ex) {
                console.log('Failed to retrieve water types.' + ex);
            }
        });

        // Populate FermentableType drop down
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetFermentableTypes", "Brews")',
            dataType: 'json',
            data: { selectedItem: "" },
            success: function (fermentableTypes) {
                // waterTypes contains the JSON formatted list
                $.each(fermentableTypes, function (i, fermentableType) {
                    $("#FermentableType").append('<option value="' + fermentableType.Value + '">' +
                        fermentableType.Text + '</option>');
                });

                $('#FermentableType').val($('#Brew_Variables_FermentableType').val());
            },
            error: function (ex) {
                console.log('Failed to retrieve fermentable types.' + ex);
            }
        });
    });
</script>

<style>
    .icon-size {
        height: 36%;
        width: 36%;
    }

    .padding-top {
        padding-top: 20px;
    }
</style>

<div class="row padding-top">
    <div style="float:left">
        <h3>Edit Brew</h3>
        <h4>Make changes to the brew.</h4>
    </div>
    <div style="float:right" class="hidden-xs">
        <img src="~/Images/barrel-icon.png" title="Brew" class="icon-size" />
    </div>
</div>
<hr />

@using (Html.BeginForm())
{
    @*@Html.AntiForgeryToken()*@
    <div class="row">
        <div class="col-md-6 form-group">
            <h3>Brew Details</h3>
            <div class="form-horizontal padding-top">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Brew.ID)

                <div class="form-group">
                    @Html.Label("Beer", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownList("BeerID", new SelectList(String.Empty, "Value", "Text"), "Select...", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BeerID, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Brew.BeerID)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.Description, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Brew.Description, new { htmlAttributes = new { @class = "form-control", placeholder = "What is unique about this brew?" } })
                        @Html.ValidationMessageFor(model => model.Brew.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.StartDate, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Brew.StartDate, new { htmlAttributes = new { @class = "form-control datepicker", data_val = "false" } })
                        @Html.ValidationMessageFor(model => model.Brew.StartDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.BottleDate, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Brew.BottleDate, new { htmlAttributes = new { @class = "form-control datepicker", data_val = "false", placeholder = "Leave blank if not finished" } })
                        @Html.ValidationMessageFor(model => model.Brew.BottleDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.StartingGravity, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9 form-inline">
                        @Html.EditorFor(model => model.Brew.StartingGravity, new { htmlAttributes = new { @class = "form-control" } }) SG
                    </div>
                    <div class="col-md-3"></div>
                    <div class="col-md-9">
                        @Html.ValidationMessageFor(model => model.Brew.StartingGravity, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.FinalGravity, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9 form-inline">
                        @Html.EditorFor(model => model.Brew.FinalGravity, new { htmlAttributes = new { @class = "form-control", placeholder = "Leave blank if not finished" } }) SG
                    </div>
                    <div class="col-md-3"></div>
                    <div class="col-md-9">
                        @Html.ValidationMessageFor(model => model.Brew.FinalGravity, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.SecondaryFermentation, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-8">
                        @Html.CheckBoxFor(model => model.Brew.SecondaryFermentation, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Brew.SecondaryFermentation, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6 form-group">

            <h3>Variables</h3>
            <div class="form-horizontal well padding-top">

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.Variables.WaterType, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.Brew.Variables.WaterType, new SelectList(String.Empty, "Value", "Text"), "Select...", new { @class = "form-control", @id = "WaterType" })
                        @Html.ValidationMessageFor(model => model.Brew.Variables.WaterType, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Brew.Variables.WaterType)
                    </div>
                </div>

                <div class="form-group" id="newWaterTypeGroup">
                    @Html.LabelFor(model => model.NewWaterType, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.NewWaterType, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NewWaterType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.Variables.FermentableType, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(model => model.Brew.Variables.FermentableType, new SelectList(String.Empty, "Value", "Text"), "Select...", new { @class = "form-control", @id = "FermentableType" })
                        @Html.ValidationMessageFor(model => model.Brew.Variables.FermentableType, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Brew.Variables.FermentableType)
                    </div>
                </div>

                <div class="form-group" id="newFermentableTypeGroup">
                    @Html.LabelFor(model => model.NewFermentableType, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.NewFermentableType, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NewFermentableType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.Variables.FermentableAmount, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 form-inline">
                        @Html.EditorFor(model => model.Brew.Variables.FermentableAmount, new { htmlAttributes = new { @class = "form-control" } }) KG
                    </div>
                    <div class="col-md-4"></div>
                    <div class="col-md-8">
                        @Html.ValidationMessageFor(model => model.Brew.Variables.FermentableAmount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.Variables.TotalVolume, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 form-inline">
                        @Html.EditorFor(model => model.Brew.Variables.TotalVolume, new { htmlAttributes = new { @class = "form-control" } }) L
                    </div>
                    <div class="col-md-4"></div>
                    <div class="col-md-8">
                        @Html.ValidationMessageFor(model => model.Brew.Variables.TotalVolume, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.Variables.BrewTemp, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8 form-inline">
                        @Html.EditorFor(model => model.Brew.Variables.BrewTemp, new { htmlAttributes = new { @class = "form-control" } }) &deg;C
                    </div>
                    <div class="col-md-4"></div>
                    <div class="col-md-8">
                        @Html.ValidationMessageFor(model => model.Brew.Variables.BrewTemp, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brew.Variables.HopDetails, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Brew.Variables.HopDetails, 3, 40, new { @class = "form-control", placeholder = "What kind of hops did you add?" })
                        @Html.ValidationMessageFor(model => model.Brew.Variables.HopDetails, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" /> |
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default" })
                </div>
            </div>
        </div>
    </div>
}

