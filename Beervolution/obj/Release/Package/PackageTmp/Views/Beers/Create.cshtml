@model Beervolution.ViewModels.CreateBeerViewModel

<script type="text/javascript">

    jQuery(document).ready(function ($) {

        // Hide newManufacturerGroup and newBeerTypeGroup
        $('#newManufacturerGroup').hide();
        $('#newBeerTypeGroup').hide();

        // Show newManufacturerGroup when Create New is selected
        $('#Manufacturer').change(function () {

            if ($('#Manufacturer').val() == 0) {
                $('#newManufacturerGroup').show();
            }
            else {
                $('#newManufacturerGroup').hide();
                $('#NewManufacturer').val('');
            }
        });

        // Show newBeerTypeGroup when Create New is selected
        $('#BeerType').change(function () {

            if ($('#BeerType').val() == 'Create New') {
                $('#newBeerTypeGroup').show();
            }
            else {
                $('#newBeerTypeGroup').hide();
                $('#NewBeerType').val('');
            }
        });

        // Populate Manufacturer drop down
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetManufacturers", "Beers")',
            dataType: 'json',
            data: { selectedItem: "" },
            success: function (manufacturers) {
                // manufacturers contains the JSON formatted list
                $.each(manufacturers, function (i, manufacturer) {
                    $("#Manufacturer").append('<option value="' + manufacturer.Value + '">' +
                        manufacturer.Text + '</option>');
                });
            },
            error: function (ex) {
                console.log('Failed to retrieve manufacturers.' + ex);
            }
        });

        // Populate Beer Type drop down
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetBeerTypes", "Beers")',
            dataType: 'json',
            data: { selectedItem: "" },
            success: function (beerTypes) {
                // beerTypes contains the JSON formatted list
                $.each(beerTypes, function (i, beerType) {
                    $("#BeerType").append('<option value="' + beerType.Value + '">' +
                        beerType.Text + '</option>');
                });
            },
            error: function (ex) {
                console.log('Failed to retrieve beer types.' + ex);
            }
        });
    });
</script>

<style>
    .icon-size {
        height: 36%;
        width: 36%;
    }

    .padding-top {
        padding-top: 20px;
    }
</style>

<div class="row padding-top">
    <div style="float:left">
        <h3>Create New Beer</h3>
        <h4>Add a new type of beer to the database.</h4>
    </div>
    <div style="float:right" class="hidden-xs">
        <img src="~/Images/beer-icon.png" title="Beer" class="icon-size" />
    </div>
</div>

@using (Html.BeginForm())
{
    @*@Html.AntiForgeryToken()*@

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Beer.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Beer.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Beer.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Beer.ManufacturerID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Beer.ManufacturerID, new SelectList(String.Empty, "Value", "Text"), "Select...", new { @class = "form-control", @id = "Manufacturer" })
                @Html.ValidationMessageFor(model => model.Beer.ManufacturerID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="newManufacturerGroup">
            @Html.LabelFor(model => model.NewManufacturer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NewManufacturer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NewManufacturer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Beer.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Beer.Type, new SelectList(String.Empty, "Value", "Text"), "Select...", new { @class = "form-control", @id = "BeerType" })
                @Html.ValidationMessageFor(model => model.Beer.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="newBeerTypeGroup">
            @Html.LabelFor(model => model.NewType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NewType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NewType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Beer.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Beer.Description, 3, 40, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Beer.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Beer.InclusiveKit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Beer.InclusiveKit)
                    @Html.ValidationMessageFor(model => model.Beer.InclusiveKit, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Beer.TargetPercentage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 form-inline">
                @Html.EditorFor(model => model.Beer.TargetPercentage, new { htmlAttributes = new { @class = "form-control" } }) %
            </div>
            <div class="col-md-2"></div>
            <div class="col-md-10">
                @Html.ValidationMessageFor(model => model.Beer.TargetPercentage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Beer.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Beer.ImageUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Beer.ImageUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" /> |
                @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}

<div class="padding-top">
    <hr />
    <div>
        <p>Note: All data submitted is subject to moderation and alterations.</p>
    </div>
</div>
