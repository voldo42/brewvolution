@model Beervolution.ViewModels.CreateBeerViewModel

<script type="text/javascript">

    jQuery(document).ready(function ($) {

        // Hide newManufacturerGroup and newBeerTypeGroup
        $('#newManufacturerGroup').hide();
        $('#newBeerTypeGroup').hide();

        // Show newManufacturerGroup when Create New is selected
        $('#Manufacturer').change(function () {

            if ($('#Manufacturer').val() == 0) {
                $('#newManufacturerGroup').show();
            }
            else {
                $('#newManufacturerGroup').hide();
                $('#NewManufacturer').val('');
            }
        });

        // Show newBeerTypeGroup when Create New is selected
        $('#BeerType').change(function () {

            if ($('#BeerType').val() == 'Create New') {
                $('#newBeerTypeGroup').show();
            }
            else {
                $('#newBeerTypeGroup').hide();
                $('#NewBeerType').val('');
            }
        });

        // Populate Manufacturer drop down
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetManufacturers", "Beers")',
            dataType: 'json',
            data: { selectedItem: @Model.Beer.Manufacturer.ID },
            success: function (manufacturers) {
                // manufacturers contains the JSON formatted list
                $.each(manufacturers, function (i, manufacturer) {
                    $("#Manufacturer").append('<option value="' + manufacturer.Value + '">' +
                        manufacturer.Text + '</option>');
                });

                $('#Manufacturer').val($('#OriginalManufacturer').val());
            },
            error: function (ex) {
                console.log('Failed to retrieve manufacturers.' + ex);
            }
        });

        // Populate Beer Type drop down
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetBeerTypes", "Beers")',
            dataType: 'json',
            data: { selectedItem: '@Model.Beer.Type' },
            success: function (beerTypes) {
                // beerTypes contains the JSON formatted list
                $.each(beerTypes, function (i, beerType) {
                    $("#BeerType").append('<option value="' + beerType.Value + '">' +
                        beerType.Text + '</option>');
                })

                $('#BeerType').val($('#OriginalBeerType').val());
            },
            error: function (ex) {
                console.log('Failed to retrieve beer types.' + ex);
            }
        });
    });
</script>

<style>
    .icon-size {
        height: 36%;
        width: 36%;
    }

    body {
        background-size: auto;
        background-image: url("../../Images/background-image.jpg");
        background-color: #cccccc;
    }

    .margins {
        margin-left: 15px;
        margin-right: 15px;
    }

    .padding-top {
        padding-top: 20px;
    }

    body-content {
        font-size: 18px;
    }
</style>

<div class="panel">
    <div class="row padding-top margins">
        <div style="float:left">
            <h3>Edit Beer</h3>
            <h4>Make changes to the beer.</h4>
        </div>
        <div style="float:right" class="hidden-xs">
            <img src="~/Images/beer-icon.png" title="Beer" class="icon-size" />
        </div>
    </div>
    <hr />
    <div class="row margins">
        @using (Html.BeginForm())
        {
            @*@Html.AntiForgeryToken()*@
            @Html.HiddenFor(model => model.Beer.ID)

            <div class="col-md-6 form-horizontal">


                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.Beer.Name, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Beer.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Beer.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Beer.ManufacturerID, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.Beer.ManufacturerID, new SelectList(String.Empty, "Value", "Text"), "Select...", new { @class = "form-control", @id = "Manufacturer" })
                        @Html.ValidationMessageFor(model => model.Beer.ManufacturerID, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.OriginalManufacturer)
                    </div>
                </div>

                <div class="form-group" id="newManufacturerGroup">
                    @Html.LabelFor(model => model.NewManufacturer, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.NewManufacturer, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NewManufacturer, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Beer.Type, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.Beer.Type, new SelectList(String.Empty, "Value", "Text"), "Select...", new { @class = "form-control", @id = "BeerType" })
                        @Html.ValidationMessageFor(model => model.Beer.Type, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.OriginalBeerType)
                    </div>
                </div>

                <div class="form-group" id="newBeerTypeGroup">
                    @Html.LabelFor(model => model.NewType, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.NewType, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NewType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Beer.TargetPercentage, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9 form-inline">
                        @Html.EditorFor(model => model.Beer.TargetPercentage, new { htmlAttributes = new { @class = "form-control" } }) %
                    </div>
                    <div class="col-md-2"></div>
                    <div class="col-md-9">
                        @Html.ValidationMessageFor(model => model.Beer.TargetPercentage, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-6 form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.Beer.Description, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.TextAreaFor(model => model.Beer.Description, 3, 40, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Beer.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Beer.ImageUrl, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Beer.ImageUrl, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Beer.ImageUrl, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Beer.InclusiveKit, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        <div class="form-control-static">
                            @Html.EditorFor(model => model.Beer.InclusiveKit)
                            @Html.ValidationMessageFor(model => model.Beer.InclusiveKit, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-12 form-group padding-top" style="text-align: center">
                <input type="submit" value="Save Changes" class="btn btn-primary btn-lg" />
            </div>
        }

    </div>
</div>
<br/>
<br/>